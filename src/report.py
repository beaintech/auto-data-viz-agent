# src/report.py
import io
from typing import List, Optional

import pandas as pd
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from PIL import Image
import plotly.io as pio

from .chart_suggester import ChartSpec
from .viz import render_chart


def _fig_to_png_bytes(fig) -> bytes:
    """
    Convert a Plotly figure to PNG bytes using kaleido backend.
    Requires `kaleido` (listed in requirements.txt).
    """
    try:
        return fig.to_image(format="png", scale=2)
    except Exception as e:
        # Helpful error if kaleido is missing
        raise RuntimeError(
            "Plotly static export failed. Ensure `kaleido` is installed "
            "(pip install kaleido) and restart."
        ) from e


def build_pdf_report(
    df: pd.DataFrame,
    specs: List[ChartSpec],
    title: str,
    brand: str,
    theme: str,
    insights: Optional[str] = None,
) -> bytes:
    """
    Build a multi-page PDF:
      - Cover page with title, brand, and optional insights
      - One page per chart in `specs`
    Returns PDF bytes.
    """
    buf = io.BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    W, H = A4

    # Cover page
    c.setFont("Helvetica-Bold", 20)
    c.drawString(2 * cm, H - 3 * cm, title)
    c.setFont("Helvetica", 12)
    c.drawString(2 * cm, H - 4 * cm, f"Generated by {brand}")
    if insights:
        textobj = c.beginText(2 * cm, H - 6 * cm)
        textobj.setFont("Helvetica", 11)
        for line in insights.splitlines()[:25]:
            textobj.textLine(line[:110])
        c.drawText(textobj)
    c.showPage()

    # Chart pages
    for spec in specs:
        fig = render_chart(df, spec, theme=theme)
        png_bytes = _fig_to_png_bytes(fig)

        img = Image.open(io.BytesIO(png_bytes))
        # Fit to page margins
        max_w, max_h = W - 3 * cm, H - 4 * cm
        img.thumbnail((int(max_w), int(max_h)))

        img_bytes = io.BytesIO()
        img.save(img_bytes, format="PNG")
        img_bytes.seek(0)

        c.setFont("Helvetica-Bold", 14)
        c.drawString(2 * cm, H - 2 * cm, spec.title or f"{spec.kind} chart")
        c.drawImage(
            ImageReader(img_bytes),
            1.5 * cm,
            2.5 * cm,
            width=img.width,
            height=img.height,
            preserveAspectRatio=True,
            mask="auto",
        )
        c.showPage()

    c.save()
    buf.seek(0)
    return buf.read()
